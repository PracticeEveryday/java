package access;

public class BankAccountMain {
    public static void main(String[] args) {
        BankAccount account = new BankAccount();
        account.deposit(10000);
        account.withdraw(3000);
        System.out.println("balance = " + account.getBalance());
    }
}

/**
 * 접근 제어자와 캡슐화를 통해 데이터를 안전하게 보호하고, BankAccount를 사용하는 개발자 입장에서
 * 해당 기능을 사용하는 `복잡도`도 낮출 수 있다.
 *
 *
 * 캡슐화는 무엇일까?
 * 사용할 수 있는 클래스의 필드와 매서드를 열어놓는 것이다.
 * 만약 사용해도 된다고 생각이 되면 그것을 열어 놓는 것이다.
 *
 *
 * 하지만, 데이터를 열어 놓는 것은 상당히 많은 혼란을 야기할 수 있다.
 * 데이터를 수정하기 위한 메서드를 열어 놓고 해당 메서드를 통해 프라이빗한 데이터를 수정하게 유도하는 것이 더 나은 선택이 될 수 있다.
 *
 *
 *📝 결국 만들어져 있는 코드를 활용하고 사용하는 사람들을 위한 최소한의 장치를 하는 것이 중요한 것이다.
 * 데이터는 숨기고 기능은 외부에 꼭 공개해야 하는 기능한 공개하고 나머지는 다 안으로 기능도 숨기는 것이다.
 * 이것이 캡슐화가 잘 된 예시라고 볼 수 있다.
 *
 * 캡슐화란 해당 데이터를 처리하는 메서드를 하나로 묶어 외부에서 접근을 제한하는 것을 말한다.
 * 즉, 데이터를 직접적으로 변경하는 것을 제한할 수 있는 기능이다.
 *
 * ✅ 속성과 기능을 하나로 묶고 외부에 꼭 `필요한 기능만을 노출` 하는 것이다.
 * 즉, 데이터와 데이터를 처리하는 기능을 하나로 모으는 것체 초점을 맞추는 것이다.
 *
 * 해당 데이터를 수정하고 싶다? 해당 기능을 사용해라 << 라고 강조 하는 것이 캡슐화 이다.
 * 즉, 수정할 수 있는 기능만을 강조하는 것이다!!!!
 */